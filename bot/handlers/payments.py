import asyncio
from datetime import datetime, timedelta
from logging import Logger

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from keyboards import ProfileKeyboard, TokenPurchaseKeyboard
from models import User
from service import PaymentService, UserService
from states import ImageProcessing

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
active_payments = {}


@router.callback_query(F.data.startswith("buy_tokens_"))
async def process_token_purchase(
    callback: CallbackQuery,
    current_user: User,
    payment_service: PaymentService,
    logger: Logger,
    user_service: UserService,
    bot: Bot,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤"""
    data_parts = str(callback.data).split("_")
    tokens = int(data_parts[2])
    amount = int(data_parts[3])

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
    payment_data = await payment_service.create_payment(
        amount=amount,
        description=f"–ü–æ–∫—É–ø–∫–∞ {tokens} —Ç–æ–∫–µ–Ω–æ–≤",
        user_id=current_user.id,
    )

    if payment_data:
        payment_id = payment_data["payment_id"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        active_payments[payment_id] = {
            "user_id": current_user.id,
            "tokens": tokens,
            "amount": amount,
            "created_at": datetime.now(),
            "status": "pending",
        }

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        asyncio.create_task(track_payment_background(logger, payment_id, payment_service, bot, user_service))

        payment_text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
            f"–ü–∞–∫–µ—Ç: {tokens} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"–°—É–º–º–∞: {amount}‚ÇΩ\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
            f"üí° <i>–¢–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</i>"
        )

        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data["confirmation_url"])],
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        callback_data=f"check_payment_{payment_id}_{tokens}",
                    ),
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")],
            ],
        )

        await callback.message.edit_text(payment_text, reply_markup=keyboard)  # type: ignore
    else:
        error_text = "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        keyboard = ProfileKeyboard()
        await callback.message.edit_text(error_text, reply_markup=keyboard())  # type: ignore

    await callback.answer()


async def track_payment_background(
    logger: Logger,
    payment_id: str,
    payment_service: PaymentService,
    bot: Bot,
    user_service: UserService,
):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    max_attempts = 60  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    attempt = 0

    while attempt < max_attempts:
        try:
            payment_status = await payment_service.check_payment(payment_id)

            if payment_status and payment_status.get("paid"):
                await process_successful_payment(payment_id, bot, logger, user_service)
                break
            if payment_status and payment_status.get("status") == "cancelled":
                await process_cancelled_payment(logger, payment_id, bot)
                break

            await asyncio.sleep(30)
            attempt += 1

        except Exception as e:
            logger.error(f"Error tracking payment {payment_id}: {e}")
            await asyncio.sleep(30)
            attempt += 1

    if attempt >= max_attempts and payment_id in active_payments:
        active_payments[payment_id]["status"] = "expired"


async def process_successful_payment(payment_id: str, bot: Bot, logger: Logger, user_service: UserService):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    if payment_id not in active_payments:
        return

    payment_info = active_payments[payment_id]
    if payment_info["status"] != "pending":
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = payment_info["user_id"]
        tokens = payment_info["tokens"]

        current_user = await user_service.get_one(user_id)
        if current_user:
            updated_user = await user_service.update_token_count(user_id, tokens)

            if updated_user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                success_text = (
                    f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                    f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens}\n"
                    f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {updated_user.token_count} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
                    f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
                )

                try:
                    await bot.send_message(chat_id=user_id, text=success_text)
                except Exception as e:
                    logger.error(f"Failed to send success notification to user {user_id}: {e}")

                # –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                active_payments[payment_id]["status"] = "completed"
                logger.info(f"Payment {payment_id} processed successfully for user {user_id}")
            else:
                logger.error(f"Failed to add tokens for payment {payment_id}")
        else:
            logger.error(f"User {user_id} not found for payment {payment_id}")

    except Exception as e:
        logger.error(f"Error processing successful payment {payment_id}: {e}")


async def process_cancelled_payment(logger: Logger, payment_id: str, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    if payment_id not in active_payments:
        return

    payment_info = active_payments[payment_id]
    if payment_info["status"] != "pending":
        return

    try:
        user_id = payment_info["user_id"]

        cancel_text = (
            "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

        try:
            await bot.send_message(chat_id=user_id, text=cancel_text)
        except Exception as e:
            logger.error(f"Failed to send cancel notification to user {user_id}: {e}")

        # –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
        active_payments[payment_id]["status"] = "cancelled"

    except Exception as e:
        logger.error(f"Error processing cancelled payment {payment_id}: {e}")


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(
    callback: CallbackQuery,
    current_user: User,
    user_service: UserService,
    payment_service: PaymentService,
    bot: Bot,
    logger: Logger,
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä—É—á–Ω—É—é"""
    data_parts = str(callback.data).split("_")
    payment_id = data_parts[2]
    tokens = int(data_parts[3])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ñ–æ–Ω–µ
    if payment_id in active_payments:
        payment_info = active_payments[payment_id]
        if payment_info["status"] == "completed":
            success_text = (
                "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                "–¢–æ–∫–µ–Ω—ã –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
            )
            keyboard = ProfileKeyboard()
            await callback.message.edit_text(success_text, reply_markup=keyboard())  # type: ignore
            await callback.answer("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            return
        if payment_info["status"] == "cancelled":
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
            cancel_text = "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω."
            keyboard = ProfileKeyboard()
            await callback.message.edit_text(cancel_text, reply_markup=keyboard())  # type: ignore
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    payment_status = await payment_service.check_payment(payment_id)

    if payment_status and payment_status["paid"]:
        await process_successful_payment(payment_id, bot, logger, user_service)

        updated_user = await user_service.get_one(current_user.id)

        success_text = (
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens}\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {updated_user.token_count if updated_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
        )
        keyboard = ProfileKeyboard()
        await callback.message.edit_text(success_text, reply_markup=keyboard())  # type: ignore
    else:
        pending_text = (
            "‚è≥ <b>–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
            "üí° <i>–¢–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</i>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ - –º—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏."
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}_{tokens}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")],
            ],
        )

        await callback.message.edit_text(pending_text, reply_markup=keyboard)  # type: ignore

    await callback.answer()


@router.callback_query(F.data.startswith("pay_"))
async def process_image_payment(callback: CallbackQuery, state: FSMContext, current_user: User):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if current_user.token_count <= 0:
        no_tokens_text = (
            "üòî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
            "–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!"
        )

        keyboard = TokenPurchaseKeyboard()
        await callback.message.edit_text(no_tokens_text, reply_markup=keyboard())  # type: ignore
        await callback.answer()
        return

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.set_state(ImageProcessing.waiting_for_payment)

    processing_text = (
        "‚ö° <b>–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é</b>\n\n"
        "–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
        "üí∞ –°–ø–∏—Å–∞–Ω 1 —Ç–æ–∫–µ–Ω"
    )

    await callback.message.edit_text(processing_text)  # type: ignore
    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
async def cleanup_old_payments():
    """–û—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    current_time = datetime.now()
    expired_payments = []

    for payment_id, payment_info in active_payments.items():
        # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        if current_time - payment_info["created_at"] > timedelta(hours=1):
            expired_payments.append(payment_id)

    for payment_id in expired_payments:
        del active_payments[payment_id]


__all__ = ["router", "cleanup_old_payments"]
