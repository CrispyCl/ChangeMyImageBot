from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from keyboards import ProfileKeyboard, TokenPurchaseKeyboard, ToMainMenuKeyboard
from models import User
from states import UserProfile

router = Router()


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, state: FSMContext, current_user: User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(UserProfile.viewing_profile)

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{current_user.id}</code>\n"
        f"üë§ –ò–º—è: {current_user.username}\n"
        f"üí∞ –¢–æ–∫–µ–Ω—ã: {current_user.token_count}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_user.date_joined.strftime('%d.%m.%Y')}\n"
    )

    if current_user.phone_number:
        profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {current_user.phone_number}\n"

    keyboard = ProfileKeyboard()
    await message.answer(profile_text, reply_markup=keyboard())


@router.callback_query(F.data == "profile")
async def show_profile_callback(callback: CallbackQuery, state: FSMContext, current_user: User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback"""
    await state.set_state(UserProfile.viewing_profile)

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{current_user.id}</code>\n"
        f"üë§ –ò–º—è: {current_user.username}\n"
        f"üí∞ –¢–æ–∫–µ–Ω—ã: {current_user.token_count}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_user.date_joined.strftime('%d.%m.%Y')}\n"
    )

    if current_user.phone_number:
        profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {current_user.phone_number}\n"

    keyboard = ProfileKeyboard()
    await callback.message.edit_text(profile_text, reply_markup=keyboard())  # type: ignore
    await callback.answer()


@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤")
async def show_token_balance(message: Message, current_user: User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤"""
    balance_text = (
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: <b>{current_user.token_count}</b>\n\n"
        f"‚ÑπÔ∏è –û–¥–∏–Ω —Ç–æ–∫–µ–Ω = –æ–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        f"üí° –ö—É–ø–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!"
    )

    keyboard = TokenPurchaseKeyboard()
    await message.answer(balance_text, reply_markup=keyboard())


@router.callback_query(F.data == "buy_tokens")
async def show_token_purchase(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    purchase_text = (
        "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤:\n\n"
        "üîπ 150 —Ç–æ–∫–µ–Ω–æ–≤ - 990‚ÇΩ\n"
        "üîπ 350 —Ç–æ–∫–µ–Ω–æ–≤ - 1990‚ÇΩ (—Å–∫–∏–¥–∫–∞ 15%)\n"
        "üîπ 800 —Ç–æ–∫–µ–Ω–æ–≤ - 3990‚ÇΩ (—Å–∫–∏–¥–∫–∞ 25%)\n\n"
        "üí° –ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!"
    )

    keyboard = TokenPurchaseKeyboard()
    await callback.message.edit_text(purchase_text, reply_markup=keyboard())  # type: ignore
    await callback.answer()


@router.message(F.text == "üé® –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def start_image_processing(message: Message, state: FSMContext, current_user: User):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if current_user.token_count <= 0:
        no_tokens_text = (
            "üòî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
            "–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!"
        )
        keyboard = TokenPurchaseKeyboard()
        await message.answer(no_tokens_text, reply_markup=keyboard())
        return

    from states import ImageProcessing

    await state.set_state(ImageProcessing.waiting_for_photo)

    instruction_text = (
        f"üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ç–æ–∫–µ–Ω\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_user.token_count} —Ç–æ–∫–µ–Ω–æ–≤"
    )

    keyboard = ToMainMenuKeyboard()
    await message.answer(instruction_text, reply_markup=keyboard())


__all__ = ["router"]
