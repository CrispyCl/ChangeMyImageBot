from logging import Logger

from aiogram import Bot, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    PhotoSize,
)

from keyboards import StyleSelectionKeyboard
from models import User
from service import GeminiImageService, UserService
from states import ImageProcessing

router = Router()


@router.message(StateFilter(ImageProcessing.waiting_for_photo), F.photo)
async def process_photo(message: Message, state: FSMContext, current_user: User):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"""
    if current_user.token_count <= 0:
        no_tokens_text = (
            "üòî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
            "–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!"
        )
        from keyboards import TokenPurchaseKeyboard

        keyboard = TokenPurchaseKeyboard()
        await message.answer(no_tokens_text, reply_markup=keyboard())
        return

    photo: PhotoSize = message.photo[-1]  # type: ignore

    await state.update_data(photo_file_id=photo.file_id)
    await state.set_state(ImageProcessing.choosing_style)

    style_text = (
        "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:\n\n"
        "üéå <b>–ê–Ω–∏–º–µ</b> - —è–ø–æ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏\n"
        "üé® <b>–†–µ–∞–ª–∏–∑–º</b> - —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏\n"
        "üñºÔ∏è <b>–ê—Ä—Ç</b> - —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å\n"
        "üåü <b>–§—ç–Ω—Ç–µ–∑–∏</b> - –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å\n"
        "ü§ñ <b>–ö–∏–±–µ—Ä–ø–∞–Ω–∫</b> - —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å\n"
        "üé≠ <b>–ö–∞—Ä–∏–∫–∞—Ç—É—Ä–∞</b> - –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å\n\n"
        "üí° <i>–ü–æ–∑—ã –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è!</i>\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ç–æ–∫–µ–Ω"
    )

    keyboard = StyleSelectionKeyboard()
    await message.answer(style_text, reply_markup=keyboard())


@router.message(StateFilter(ImageProcessing.waiting_for_photo))
async def invalid_photo(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""
    error_text = (
        "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG"
    )
    await message.answer(error_text)


@router.callback_query(StateFilter(ImageProcessing.choosing_style), F.data.startswith("style_"))
async def process_style_selection(
    callback: CallbackQuery,
    state: FSMContext,
    current_user: User,
    user_service: UserService,
    image_service: GeminiImageService,
    bot: Bot,
    logger: Logger,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    style = str(callback.data).split("_")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    if current_user.token_count <= 0:
        no_tokens_text = "üòî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
        await callback.message.edit_text(no_tokens_text)  # type: ignore
        await callback.answer()
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
    updated_user = await user_service.repo.update_token_count(current_user.id, current_user.token_count - 1)

    if not updated_user:
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await callback.message.edit_text(error_text)  # type: ignore
        await callback.answer()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    processing_text = (
        f"üé® <b>–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
        f"–°—Ç–∏–ª—å: {get_style_name(style)}\n"
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥...\n\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω 1 —Ç–æ–∫–µ–Ω\n"
        f"üí≥ –û—Å—Ç–∞—Ç–æ–∫: {updated_user.token_count} —Ç–æ–∫–µ–Ω–æ–≤"
    )

    await callback.message.edit_text(processing_text)  # type: ignore
    await callback.answer("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!")

    data = await state.get_data()
    photo_file_id = str(data.get("photo_file_id"))

    try:
        file = await bot.get_file(photo_file_id)
        file_data = await bot.download_file(str(file.file_path))
        if not file_data:
            raise ValueError("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª).")

        image_bytes = file_data.read()

        result_image = await image_service.transform_image(image_bytes=image_bytes, style=style)

        if result_image:
            photo = BufferedInputFile(result_image, filename=f"styled_{style}.png")
            success_text = (
                f"‚úÖ <b>–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                f"üé® –°—Ç–∏–ª—å: {get_style_name(style)}\n"
                f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: {updated_user.token_count}"
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Å—Ç–∏–ª—å", callback_data="new_style")],
                    [InlineKeyboardButton(text="üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="new_photo")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
                ],
            )

            await callback.message.answer_photo(  # type: ignore
                photo=photo,
                caption=success_text,
                reply_markup=keyboard,
            )
            await callback.message.delete()  # type: ignore
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await user_service.repo.update_token_count(current_user.id, updated_user.token_count + 1)

            error_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
                "üí∞ –¢–æ–∫–µ–Ω –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –≤–∞—à —Å—á–µ—Ç"
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="new_photo")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
                ],
            )
            await callback.message.edit_text(error_text, reply_markup=keyboard)  # type: ignore
            await callback.answer()
    except Exception as e:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await user_service.repo.update_token_count(current_user.id, updated_user.token_count + 1)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        error_text = (
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n" "üí∞ –¢–æ–∫–µ–Ω –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –≤–∞—à —Å—á–µ—Ç"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="new_photo")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
            ],
        )

        await callback.message.edit_text(error_text, reply_markup=keyboard)  # type: ignore

    finally:
        await state.clear()


@router.callback_query(F.data == "new_style")
async def choose_new_style(callback: CallbackQuery, state: FSMContext, current_user: User):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Ç–æ–≥–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if current_user.token_count <= 0:
        no_tokens_text = "üòî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
        await callback.message.edit_text(no_tokens_text)  # type: ignore
        await callback.answer()
        return

    data = await state.get_data()
    if not data.get("photo_file_id"):
        await callback.message.edit_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")  # type: ignore
        await state.set_state(ImageProcessing.waiting_for_photo)
        await callback.answer()
        return

    await state.set_state(ImageProcessing.choosing_style)

    style_text = (
        f"üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å</b>\n\n"
        f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∏–ª–µ:\n\n"
        f"üéå <b>–ê–Ω–∏–º–µ</b> - —è–ø–æ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏\n"
        f"üé® <b>–†–µ–∞–ª–∏–∑–º</b> - —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏\n"
        f"üñºÔ∏è <b>–ê—Ä—Ç</b> - —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å\n"
        f"üåü <b>–§—ç–Ω—Ç–µ–∑–∏</b> - –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å\n"
        f"ü§ñ <b>–ö–∏–±–µ—Ä–ø–∞–Ω–∫</b> - —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å\n"
        f"üé≠ <b>–ö–∞—Ä–∏–∫–∞—Ç—É—Ä–∞</b> - –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ç–æ–∫–µ–Ω\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_user.token_count} —Ç–æ–∫–µ–Ω–æ–≤"
    )

    keyboard = StyleSelectionKeyboard()
    await callback.message.edit_text(style_text, reply_markup=keyboard())  # type: ignore
    await callback.answer()


@router.callback_query(F.data == "new_photo")
async def upload_new_photo(callback: CallbackQuery, state: FSMContext, current_user: User):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ"""
    await state.clear()
    await state.set_state(ImageProcessing.waiting_for_photo)

    instruction_text = (
        f"üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å.\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n\n"
        f"üí° –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –ø–æ–∑—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ç–æ–∫–µ–Ω –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_user.token_count} —Ç–æ–∫–µ–Ω–æ–≤"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")],
        ],
    )
    await callback.message.edit_text(instruction_text, reply_markup=keyboard)  # type: ignore
    await callback.answer()


def get_style_name(style: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è"""
    style_names = {
        "anime": "üéå –ê–Ω–∏–º–µ",
        "realism": "üé® –†–µ–∞–ª–∏–∑–º",
        "art": "üñºÔ∏è –ê—Ä—Ç",
        "fantasy": "üåü –§—ç–Ω—Ç–µ–∑–∏",
        "cyberpunk": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "cartoon": "üé≠ –ö–∞—Ä–∏–∫–∞—Ç—É—Ä–∞",
    }
    return style_names.get(style, "üé® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å")


__all__ = ["router"]
